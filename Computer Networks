Some Important Terms

-> Network: A network refers to a collection of interconnected 	nodes or entities that are capable of communication and interaction with each other.

        ~LAN: Local Area Network
				 A LAN is a network that spans a small geographical area,
                 such as a home, office building, or campus. It enables 
                 connected devices to share resources like printers, files,
                 and internet access.

        ~WAN: Wide Area Network
				 A WAN covers a larger geographical area, often 
                 connecting multiple LANs together. The internet is the most well-known example of a wide area network.

		~MAN: Metropolitan Area Network
				 A MAN covers a city or metropolitan area, providing 		connectivity between various LANs.

		~Wireless Network:
				 This type of network allows devices to connect and 
                 communicate wirelessly, without the need for physical 
                 cables. Wi-Fi networks are a common example.

		~ Client-Server Network:
				 In this architecture, one or more central servers provide 			services and resources to multiple client devices. Clients 			request and utilize these resources over the network.
        ~ Peer-to-Peer Network (P2P): 
				 In a P2P network, devices connect directly with each other, 		without relying on a central server. Each device can act as 		both a client and a server, sharing resources and information 		with other devices in the network.


->Internet: The internet is a global network of interconnected computer networks that spans the entire globe.

At its core, the internet is based on the TCP/IP protocol suite, which stands for Transmission Control Protocol/Internet Protocol. TCP/IP defines the rules and procedures for data transmission and routing on the internet. This protocol suite ensures that data packets are properly addressed, routed, and delivered across the network.

The internet provides a wide range of services and resources, including:

(i) World Wide Web (WWW): The web is a system of interconnected hypertext documents and resources accessed through web browsers. It allows users to browse websites, access information, and interact with web applications.

(ii) Email: Electronic mail (email) enables users to send and receive messages electronically over the internet. It is one of the most widely used communication services on the internet.

(iii) File Transfer: The internet allows users to transfer files between computers using various protocols like FTP (File Transfer Protocol) or cloud storage services.

(iv) Instant Messaging and Voice/Video Calls: Internet-based messaging platforms and applications enable real-time text, voice, and video communication between individuals and groups.

(v) Social Media: Social networking platforms provide a space for users to create profiles, connect with others, share content, and communicate.

-> IP Address (INTERNET PROTOCOL) : It serves as a way to identify and locate devices on a network, allowing them to communicate with each other over the internet.

IP addresses are part of the TCP/IP protocol suite, which is used to route data packets across the internet. These addresses are essential for data transmission and routing, enabling devices to send and receive information to and from specific destinations.

There are two versions of IP addresses currently in use:

1.	IPv4 (Internet Protocol version 4): This is the older and more widely used version of IP addresses. IPv4 addresses consist of a 32-bit numeric value expressed in four sets of decimal numbers separated by periods. Each set can range from 0 to 255, representing a possible combination of approximately 4.3 billion unique addresses. However, due to the rapid growth of internet-connected devices, the availability of IPv4 addresses is becoming limited.

Example of an IPv4 address: 192.168.0.1

2.  IPv6 (Internet Protocol version 6): IPv6 was developed to address the limitation of IPv4 and provide a larger address space. IPv6 addresses are 128-bit hexadecimal values separated by colons. This expansion allows for an enormous number of unique addresses, approximately 340 undecillion (3.4 x 10^38). IPv6 adoption is increasing to accommodate the growing number of devices connecting to the internet.

Example of an IPv6 address: 2001:0db8:85a3:0000:0000:8a2e:0370:7334

Both IPv4 and IPv6 addresses serve the same fundamental purpose of identifying and locating devices on a network. However, due to the depletion of available IPv4 addresses, the transition to IPv6 is taking place to ensure the continued growth and connectivity of devices on the internet.

-> Browser: A browser, short for web browser, provides an interface for users to view, retrieve, and interact with web pages, websites, and online content. 

-> Browser Engine: A browser engine, also known as a rendering engine or layout engine, is the core software component of a web browser responsible for rendering web pages and displaying them to the user. It interprets HTML, CSS, and other web technologies, transforming them into a visual representation that users can interact with.

Different web browsers utilize different rendering engines, and the choice of engine can impact the browser's performance, compatibility with web standards, and rendering capabilities. Here are some commonly used browser engines:

(i) Blink: Blink is a rendering engine developed by Google and used in Google Chrome, Microsoft Edge (Chromium-based version), Opera, and other Chromium-based browsers. It was forked from the WebKit engine in 2013. Blink focuses on performance, security, and modern web standards.

(ii) Gecko: Gecko is the rendering engine developed by Mozilla and used in the Mozilla Firefox browser. It is an open-source engine that emphasizes standards compliance, extensibility, and privacy.

(iii) WebKit: WebKit is an open-source rendering engine primarily developed by Apple. It powers the Safari browser and was the original engine for Google Chrome before it transitioned to Blink. WebKit is known for its performance, rendering accuracy, and support for web standards.

(iv) Trident: Trident is the proprietary rendering engine developed by Microsoft for the legacy versions of Internet Explorer. It has been largely phased out in favor of the Chromium-based Microsoft Edge browser.

(v) EdgeHTML: EdgeHTML was the original rendering engine used in the Microsoft Edge browser before it transitioned to the Chromium-based version. It was developed by Microsoft and designed to provide better performance and web standards support compared to Trident.

(Vi) Presto: Presto was the proprietary rendering engine used in the Opera browser prior to its switch to the Chromium-based Blink engine. Presto was known for its speed, small memory footprint, and advanced features.

——————————————————————————————————----------------------------------------------------

Client Server Model

The client-server model is a distributed computing architecture in which tasks and responsibilities are divided between two types of entities: clients and servers. This model is commonly used in networked systems, such as the internet, where clients request services or resources from servers.

Its key components are:

(i) Client: The client can be personal computer, smartphone, web browser, or any device or software that interacts with a server. Clients typically have user interfaces that allow users to interact with the applications or access resources provided by servers and initiate requests for services or resources.

(ii) Server: The server is designed to handle and fulfill client requests, process data, and perform tasks based on the nature of the service it provides. Servers are often optimized for performance, reliability, and security and provides services or resources in response to client requests.

(iii) Request-Response Model: In the client-server model, communication between clients and servers follows a request-response pattern. The client sends a request to the server, specifying the type of service or resource it needs. The server processes the request and generates a response, which is sent back to the client. The response typically contains the requested information or indicates the outcome of the request.

(iv) Communication Protocols: Clients and servers use communication protocols to establish and maintain their interaction. The most common protocol used in the client-server model is the Hypertext Transfer Protocol (HTTP), which governs communication on the World Wide Web. Other protocols, such as File Transfer Protocol (FTP), Simple Mail Transfer Protocol (SMTP), and Transmission Control Protocol (TCP), are used for specific types of services.

(v) Scalability and Centralization: The client-server model allows for scalable systems, where multiple clients can simultaneously connect to and interact with a server. Servers can handle multiple requests concurrently, serving multiple clients simultaneously. This centralization of resources and services on the server side enables efficient management, control, and distribution of resources.

(Vi) Load Distribution: In some scenarios, multiple servers may be used to handle client requests, distributing the workload across the server network. This approach, known as load balancing, helps improve performance, fault tolerance, and scalability.

(vii) Security: The client-server model allows for the implementation of security measures to protect the integrity and confidentiality of data transmitted between clients and servers. Techniques such as encryption, authentication, access control, and firewalls are commonly employed to ensure secure communication and protect against unauthorized access.

--------------------------------------------------------------------------------------

How search works:

When a client (user) searches for a domain name, it typically follows the process of domain name resolution, which involves translating the domain name into the corresponding IP address. Here's an overview of how this process works:

(i) Client Query: The client initiates a search by entering a domain name into a web browser or other application. For example, the client may enter "www.example.com".

(ii) Local DNS Cache: The client's device checks its local DNS cache first. DNS (Domain Name System) is a distributed system that stores domain name records and their associated IP addresses. If the requested domain name and its corresponding IP address are already cached on the device, the resolution process can be bypassed, and the IP address is obtained directly.

(iii) Recursive DNS Servers: If the domain name is not found in the local cache, the client's device contacts a recursive DNS server, which acts as an intermediary. The recursive DNS server does not have the requested domain information, but it is responsible for querying other DNS servers to find the IP address associated with the domain name.

(iv) Root DNS Servers: The recursive DNS server first contacts one of the root DNS servers. These servers are responsible for directing DNS queries to the appropriate top-level domain (TLD) servers.

(v) TLD DNS Servers: The root DNS server responds to the recursive DNS server with the IP address of the TLD DNS server responsible for the specific top-level domain of the requested domain name (e.g., ".com", ".org", ".net"). The recursive DNS server then queries the TLD DNS server.

(Vi) Authoritative DNS Servers: The TLD DNS server responds to the recursive DNS server with the IP address of the authoritative DNS server responsible for the requested domain name. The authoritative DNS server is managed by the domain name owner or their DNS provider and holds the specific domain name records.

(vii) DNS Record Retrieval: The recursive DNS server sends a query to the authoritative DNS server for the IP address associated with the requested domain name.

(viii) Response: The authoritative DNS server responds to the recursive DNS server with the IP address of the requested domain name.

(ix) IP Address Delivery: The recursive DNS server caches the IP address and delivers it back to the client's device.

(x) Client Access: The client's device now has the IP address associated with the domain name. It can use this IP address to establish a connection with the server hosting the requested website or service.

It's important to note that DNS caching occurs at various levels to improve efficiency and reduce the load on DNS servers. The IP address obtained from the DNS resolution process is used by the client to connect to the server associated with the requested domain name and access the desired website or service.